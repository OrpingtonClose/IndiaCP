package com.barclays.indiacp.cordapp.api

import com.barclays.indiacp.cordapp.contract.IndiaCommercialPaper
import com.barclays.indiacp.cordapp.protocol.issuer.DealEntryFlow
import com.barclays.indiacp.cordapp.protocol.issuer.ISINGenerationFlow
import com.barclays.indiacp.cordapp.protocol.issuer.IssueCPFlow
import com.barclays.indiacp.cordapp.utilities.CPUtils
import net.corda.core.contracts.*
import net.corda.core.serialization.OpaqueBytes
import net.corda.core.utilities.Emoji
import net.corda.core.utilities.loggerFor
import javax.ws.rs.*
import javax.ws.rs.core.MediaType
import javax.ws.rs.core.Response
import net.corda.flows.CashCommand
import net.corda.flows.CashFlow
import net.corda.core.contracts.DOLLARS
import net.corda.core.contracts.Amount
import net.corda.core.node.ServiceHub
import net.corda.flows.CashFlowResult

/**
 * Created by ritukedia on 07/01/17.
 */
@Path("indiacp")
class IndiaCPProgramApi(val services: ServiceHub) {
    val notaryName = "Controller" //todo: remove hardcoding

    private companion object {
        val logger = loggerFor<IndiaCPProgramApi>()
    }

    @POST
    @Path("generateISIN/{ref}")
    @Consumes(MediaType.APPLICATION_JSON)
    fun generateISIN(@PathParam("ref") ref: String, isin: String): Response {
        try {
            val stx = services.invokeFlowAsync(ISINGenerationFlow::class.java,  ref, isin).resultFuture.get()
            logger.info("ISIN Stamped on CP\n\nFinal transaction is:\n\n${Emoji.renderIfSupported(stx.tx)}")
            return Response.status(Response.Status.OK).build()
        } catch (ex: Throwable) {
            logger.info("Exception when creating deal: ${ex.toString()}")
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(ex.toString()).build()
        }
    }

}