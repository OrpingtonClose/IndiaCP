/*
 * IndiaCP API
 *
 * This API will drive the UI
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CPProgram :  IEquatable<CPProgram>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CPProgram" /> class.
        /// </summary>
        /// <param name="ProgramId">Unique identifier representing a specific CP Program raised by an Issuer.</param>
        /// <param name="Name">Name of the CP Program.</param>
        /// <param name="Type">Type of the CP Program.</param>
        /// <param name="Purpose">Purpose of the CP Program.</param>
        /// <param name="IssuerId">Unique identifier of the Issuer. This will also uniquely map to the DL Node of the Issuer.</param>
        /// <param name="IssuerName">Display name of the Issuer.</param>
        /// <param name="IssueCommencementDate">Date when the CP Program was initiated. India regulations mandate that a program should be fully allocated within 2 weeks of commencement..</param>
        /// <param name="ProgramSize">Total borrowing amount under this CP Program.</param>
        /// <param name="ProgramCurrency">Currency of the issue of CP notes.</param>
        /// <param name="MaturityDays">No of days to maturity from the value date.</param>
        /// <param name="IpaId">Unique identifier of the IPA. This will also uniquely map to the DL Node of the IPA.</param>
        /// <param name="IpaName">Display name of the IPA.</param>
        /// <param name="DepositoryId">Unique identifier of the Depository (NSDL). This will also uniquely map to the DL Node of the Depository.</param>
        /// <param name="DepositoryName">Display name of the Depository.</param>
        /// <param name="IsinGenerationRequestDocId">Unique identifier of the documents sent to the depository to generate ISIN.</param>
        /// <param name="IpaVerificationRequestDocId">Unique identifier of the documents sent to the IPA to certify the CP Program.</param>
        /// <param name="IpaCertificateDocId">Unique identifier of the IPA certificate issued by the IPA on verification of the CP Program and supporting Issuer documents.</param>
        /// <param name="CorporateActionFormDocId">Unique identifier of the Corporate Action Form generated by the Issuer to allot CP.</param>
        /// <param name="AllotmentLetterDocId">Unique identifier of the Allotment Letter generated by IPA for CP transfer to Investor DP account.</param>
        public CPProgram(string ProgramId = null, string Name = null, string Type = null, string Purpose = null, string IssuerId = null, string IssuerName = null, DateTime? IssueCommencementDate = null, int? ProgramSize = null, string ProgramCurrency = null, int? MaturityDays = null, string IpaId = null, string IpaName = null, string DepositoryId = null, string DepositoryName = null, string IsinGenerationRequestDocId = null, string IpaVerificationRequestDocId = null, string IpaCertificateDocId = null, string CorporateActionFormDocId = null, string AllotmentLetterDocId = null)
        {
            this.ProgramId = ProgramId;
            this.Name = Name;
            this.Type = Type;
            this.Purpose = Purpose;
            this.IssuerId = IssuerId;
            this.IssuerName = IssuerName;
            this.IssueCommencementDate = IssueCommencementDate;
            this.ProgramSize = ProgramSize;
            this.ProgramCurrency = ProgramCurrency;
            this.MaturityDays = MaturityDays;
            this.IpaId = IpaId;
            this.IpaName = IpaName;
            this.DepositoryId = DepositoryId;
            this.DepositoryName = DepositoryName;
            this.IsinGenerationRequestDocId = IsinGenerationRequestDocId;
            this.IpaVerificationRequestDocId = IpaVerificationRequestDocId;
            this.IpaCertificateDocId = IpaCertificateDocId;
            this.CorporateActionFormDocId = CorporateActionFormDocId;
            this.AllotmentLetterDocId = AllotmentLetterDocId;
            
        }

        /// <summary>
        /// Unique identifier representing a specific CP Program raised by an Issuer
        /// </summary>
        /// <value>Unique identifier representing a specific CP Program raised by an Issuer</value>
        [DataMember(Name="program_id")]
        public string ProgramId { get; set; }

        /// <summary>
        /// Name of the CP Program
        /// </summary>
        /// <value>Name of the CP Program</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Type of the CP Program
        /// </summary>
        /// <value>Type of the CP Program</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Purpose of the CP Program
        /// </summary>
        /// <value>Purpose of the CP Program</value>
        [DataMember(Name="purpose")]
        public string Purpose { get; set; }

        /// <summary>
        /// Unique identifier of the Issuer. This will also uniquely map to the DL Node of the Issuer
        /// </summary>
        /// <value>Unique identifier of the Issuer. This will also uniquely map to the DL Node of the Issuer</value>
        [DataMember(Name="issuer_id")]
        public string IssuerId { get; set; }

        /// <summary>
        /// Display name of the Issuer
        /// </summary>
        /// <value>Display name of the Issuer</value>
        [DataMember(Name="issuer_name")]
        public string IssuerName { get; set; }

        /// <summary>
        /// Date when the CP Program was initiated. India regulations mandate that a program should be fully allocated within 2 weeks of commencement.
        /// </summary>
        /// <value>Date when the CP Program was initiated. India regulations mandate that a program should be fully allocated within 2 weeks of commencement.</value>
        [DataMember(Name="issue_commencement_date")]
        public DateTime? IssueCommencementDate { get; set; }

        /// <summary>
        /// Total borrowing amount under this CP Program
        /// </summary>
        /// <value>Total borrowing amount under this CP Program</value>
        [DataMember(Name="program_size")]
        public int? ProgramSize { get; set; }

        /// <summary>
        /// Currency of the issue of CP notes
        /// </summary>
        /// <value>Currency of the issue of CP notes</value>
        [DataMember(Name="program_currency")]
        public string ProgramCurrency { get; set; }

        /// <summary>
        /// No of days to maturity from the value date
        /// </summary>
        /// <value>No of days to maturity from the value date</value>
        [DataMember(Name="maturity_days")]
        public int? MaturityDays { get; set; }

        /// <summary>
        /// Unique identifier of the IPA. This will also uniquely map to the DL Node of the IPA
        /// </summary>
        /// <value>Unique identifier of the IPA. This will also uniquely map to the DL Node of the IPA</value>
        [DataMember(Name="ipa_id")]
        public string IpaId { get; set; }

        /// <summary>
        /// Display name of the IPA
        /// </summary>
        /// <value>Display name of the IPA</value>
        [DataMember(Name="ipa_name")]
        public string IpaName { get; set; }

        /// <summary>
        /// Unique identifier of the Depository (NSDL). This will also uniquely map to the DL Node of the Depository
        /// </summary>
        /// <value>Unique identifier of the Depository (NSDL). This will also uniquely map to the DL Node of the Depository</value>
        [DataMember(Name="depository_id")]
        public string DepositoryId { get; set; }

        /// <summary>
        /// Display name of the Depository
        /// </summary>
        /// <value>Display name of the Depository</value>
        [DataMember(Name="depository_name")]
        public string DepositoryName { get; set; }

        /// <summary>
        /// Unique identifier of the documents sent to the depository to generate ISIN
        /// </summary>
        /// <value>Unique identifier of the documents sent to the depository to generate ISIN</value>
        [DataMember(Name="isin_generation_request_doc_id")]
        public string IsinGenerationRequestDocId { get; set; }

        /// <summary>
        /// Unique identifier of the documents sent to the IPA to certify the CP Program
        /// </summary>
        /// <value>Unique identifier of the documents sent to the IPA to certify the CP Program</value>
        [DataMember(Name="ipa_verification_request_doc_id")]
        public string IpaVerificationRequestDocId { get; set; }

        /// <summary>
        /// Unique identifier of the IPA certificate issued by the IPA on verification of the CP Program and supporting Issuer documents
        /// </summary>
        /// <value>Unique identifier of the IPA certificate issued by the IPA on verification of the CP Program and supporting Issuer documents</value>
        [DataMember(Name="ipa_certificate_doc_id")]
        public string IpaCertificateDocId { get; set; }

        /// <summary>
        /// Unique identifier of the Corporate Action Form generated by the Issuer to allot CP
        /// </summary>
        /// <value>Unique identifier of the Corporate Action Form generated by the Issuer to allot CP</value>
        [DataMember(Name="corporate_action_form_doc_id")]
        public string CorporateActionFormDocId { get; set; }

        /// <summary>
        /// Unique identifier of the Allotment Letter generated by IPA for CP transfer to Investor DP account
        /// </summary>
        /// <value>Unique identifier of the Allotment Letter generated by IPA for CP transfer to Investor DP account</value>
        [DataMember(Name="allotment_letter_doc_id")]
        public string AllotmentLetterDocId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CPProgram {\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  IssueCommencementDate: ").Append(IssueCommencementDate).Append("\n");
            sb.Append("  ProgramSize: ").Append(ProgramSize).Append("\n");
            sb.Append("  ProgramCurrency: ").Append(ProgramCurrency).Append("\n");
            sb.Append("  MaturityDays: ").Append(MaturityDays).Append("\n");
            sb.Append("  IpaId: ").Append(IpaId).Append("\n");
            sb.Append("  IpaName: ").Append(IpaName).Append("\n");
            sb.Append("  DepositoryId: ").Append(DepositoryId).Append("\n");
            sb.Append("  DepositoryName: ").Append(DepositoryName).Append("\n");
            sb.Append("  IsinGenerationRequestDocId: ").Append(IsinGenerationRequestDocId).Append("\n");
            sb.Append("  IpaVerificationRequestDocId: ").Append(IpaVerificationRequestDocId).Append("\n");
            sb.Append("  IpaCertificateDocId: ").Append(IpaCertificateDocId).Append("\n");
            sb.Append("  CorporateActionFormDocId: ").Append(CorporateActionFormDocId).Append("\n");
            sb.Append("  AllotmentLetterDocId: ").Append(AllotmentLetterDocId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CPProgram)obj);
        }

        /// <summary>
        /// Returns true if CPProgram instances are equal
        /// </summary>
        /// <param name="other">Instance of CPProgram to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CPProgram other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ProgramId == other.ProgramId ||
                    this.ProgramId != null &&
                    this.ProgramId.Equals(other.ProgramId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Purpose == other.Purpose ||
                    this.Purpose != null &&
                    this.Purpose.Equals(other.Purpose)
                ) && 
                (
                    this.IssuerId == other.IssuerId ||
                    this.IssuerId != null &&
                    this.IssuerId.Equals(other.IssuerId)
                ) && 
                (
                    this.IssuerName == other.IssuerName ||
                    this.IssuerName != null &&
                    this.IssuerName.Equals(other.IssuerName)
                ) && 
                (
                    this.IssueCommencementDate == other.IssueCommencementDate ||
                    this.IssueCommencementDate != null &&
                    this.IssueCommencementDate.Equals(other.IssueCommencementDate)
                ) && 
                (
                    this.ProgramSize == other.ProgramSize ||
                    this.ProgramSize != null &&
                    this.ProgramSize.Equals(other.ProgramSize)
                ) && 
                (
                    this.ProgramCurrency == other.ProgramCurrency ||
                    this.ProgramCurrency != null &&
                    this.ProgramCurrency.Equals(other.ProgramCurrency)
                ) && 
                (
                    this.MaturityDays == other.MaturityDays ||
                    this.MaturityDays != null &&
                    this.MaturityDays.Equals(other.MaturityDays)
                ) && 
                (
                    this.IpaId == other.IpaId ||
                    this.IpaId != null &&
                    this.IpaId.Equals(other.IpaId)
                ) && 
                (
                    this.IpaName == other.IpaName ||
                    this.IpaName != null &&
                    this.IpaName.Equals(other.IpaName)
                ) && 
                (
                    this.DepositoryId == other.DepositoryId ||
                    this.DepositoryId != null &&
                    this.DepositoryId.Equals(other.DepositoryId)
                ) && 
                (
                    this.DepositoryName == other.DepositoryName ||
                    this.DepositoryName != null &&
                    this.DepositoryName.Equals(other.DepositoryName)
                ) && 
                (
                    this.IsinGenerationRequestDocId == other.IsinGenerationRequestDocId ||
                    this.IsinGenerationRequestDocId != null &&
                    this.IsinGenerationRequestDocId.Equals(other.IsinGenerationRequestDocId)
                ) && 
                (
                    this.IpaVerificationRequestDocId == other.IpaVerificationRequestDocId ||
                    this.IpaVerificationRequestDocId != null &&
                    this.IpaVerificationRequestDocId.Equals(other.IpaVerificationRequestDocId)
                ) && 
                (
                    this.IpaCertificateDocId == other.IpaCertificateDocId ||
                    this.IpaCertificateDocId != null &&
                    this.IpaCertificateDocId.Equals(other.IpaCertificateDocId)
                ) && 
                (
                    this.CorporateActionFormDocId == other.CorporateActionFormDocId ||
                    this.CorporateActionFormDocId != null &&
                    this.CorporateActionFormDocId.Equals(other.CorporateActionFormDocId)
                ) && 
                (
                    this.AllotmentLetterDocId == other.AllotmentLetterDocId ||
                    this.AllotmentLetterDocId != null &&
                    this.AllotmentLetterDocId.Equals(other.AllotmentLetterDocId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ProgramId != null)
                    hash = hash * 59 + this.ProgramId.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.Purpose != null)
                    hash = hash * 59 + this.Purpose.GetHashCode();
                    if (this.IssuerId != null)
                    hash = hash * 59 + this.IssuerId.GetHashCode();
                    if (this.IssuerName != null)
                    hash = hash * 59 + this.IssuerName.GetHashCode();
                    if (this.IssueCommencementDate != null)
                    hash = hash * 59 + this.IssueCommencementDate.GetHashCode();
                    if (this.ProgramSize != null)
                    hash = hash * 59 + this.ProgramSize.GetHashCode();
                    if (this.ProgramCurrency != null)
                    hash = hash * 59 + this.ProgramCurrency.GetHashCode();
                    if (this.MaturityDays != null)
                    hash = hash * 59 + this.MaturityDays.GetHashCode();
                    if (this.IpaId != null)
                    hash = hash * 59 + this.IpaId.GetHashCode();
                    if (this.IpaName != null)
                    hash = hash * 59 + this.IpaName.GetHashCode();
                    if (this.DepositoryId != null)
                    hash = hash * 59 + this.DepositoryId.GetHashCode();
                    if (this.DepositoryName != null)
                    hash = hash * 59 + this.DepositoryName.GetHashCode();
                    if (this.IsinGenerationRequestDocId != null)
                    hash = hash * 59 + this.IsinGenerationRequestDocId.GetHashCode();
                    if (this.IpaVerificationRequestDocId != null)
                    hash = hash * 59 + this.IpaVerificationRequestDocId.GetHashCode();
                    if (this.IpaCertificateDocId != null)
                    hash = hash * 59 + this.IpaCertificateDocId.GetHashCode();
                    if (this.CorporateActionFormDocId != null)
                    hash = hash * 59 + this.CorporateActionFormDocId.GetHashCode();
                    if (this.AllotmentLetterDocId != null)
                    hash = hash * 59 + this.AllotmentLetterDocId.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CPProgram left, CPProgram right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CPProgram left, CPProgram right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
