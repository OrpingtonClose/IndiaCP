/*
 * IndiaCP API
 *
 * This API will drive the UI
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DepositoryAccountDetails :  IEquatable<DepositoryAccountDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositoryAccountDetails" /> class.
        /// </summary>
        /// <param name="DpId">Unique identifier of the DP Account at the Depository.</param>
        /// <param name="DpName">Name under which the DP Account is registered. For e.g. Barclays Securities India Pvt Ltd.</param>
        /// <param name="ClientId">Unique identifier of the Client at the Depository.</param>
        public DepositoryAccountDetails(string DpId = null, string DpName = null, string ClientId = null)
        {
            this.DpId = DpId;
            this.DpName = DpName;
            this.ClientId = ClientId;
            
        }

        /// <summary>
        /// Unique identifier of the DP Account at the Depository
        /// </summary>
        /// <value>Unique identifier of the DP Account at the Depository</value>
        [DataMember(Name="dp_id")]
        public string DpId { get; set; }

        /// <summary>
        /// Name under which the DP Account is registered. For e.g. Barclays Securities India Pvt Ltd
        /// </summary>
        /// <value>Name under which the DP Account is registered. For e.g. Barclays Securities India Pvt Ltd</value>
        [DataMember(Name="dp_name")]
        public string DpName { get; set; }

        /// <summary>
        /// Unique identifier of the Client at the Depository
        /// </summary>
        /// <value>Unique identifier of the Client at the Depository</value>
        [DataMember(Name="client_id")]
        public string ClientId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepositoryAccountDetails {\n");
            sb.Append("  DpId: ").Append(DpId).Append("\n");
            sb.Append("  DpName: ").Append(DpName).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((DepositoryAccountDetails)obj);
        }

        /// <summary>
        /// Returns true if DepositoryAccountDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of DepositoryAccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepositoryAccountDetails other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.DpId == other.DpId ||
                    this.DpId != null &&
                    this.DpId.Equals(other.DpId)
                ) && 
                (
                    this.DpName == other.DpName ||
                    this.DpName != null &&
                    this.DpName.Equals(other.DpName)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.DpId != null)
                    hash = hash * 59 + this.DpId.GetHashCode();
                    if (this.DpName != null)
                    hash = hash * 59 + this.DpName.GetHashCode();
                    if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(DepositoryAccountDetails left, DepositoryAccountDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DepositoryAccountDetails left, DepositoryAccountDetails right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
