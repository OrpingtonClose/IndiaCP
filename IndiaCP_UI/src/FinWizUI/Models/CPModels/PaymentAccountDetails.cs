/*
 * IndiaCP API
 *
 * This API will drive the UI
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PaymentAccountDetails :  IEquatable<PaymentAccountDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAccountDetails" /> class.
        /// </summary>
        /// <param name="CreditorName">Name in which the payment has to be made. For e.g. Barclays Investments &amp; Loans (India) Ltd CP.</param>
        /// <param name="BankAccountNo">Bank account no. at the IPA Bank.</param>
        /// <param name="BankAccountType">Bank account type. For e.g. current account.</param>
        /// <param name="BankName">Name of the IPA Bank.</param>
        /// <param name="RtgsIfscCode">RTGS IFSC code of the IPA Bank to receive payments.</param>
        public PaymentAccountDetails(string CreditorName = null, string BankAccountNo = null, string BankAccountType = null, string BankName = null, string RtgsIfscCode = null)
        {
            this.CreditorName = CreditorName;
            this.BankAccountNo = BankAccountNo;
            this.BankAccountType = BankAccountType;
            this.BankName = BankName;
            this.RtgsIfscCode = RtgsIfscCode;
            
        }

        /// <summary>
        /// Name in which the payment has to be made. For e.g. Barclays Investments & Loans (India) Ltd CP
        /// </summary>
        /// <value>Name in which the payment has to be made. For e.g. Barclays Investments & Loans (India) Ltd CP</value>
        [DataMember(Name="creditor_name")]
        public string CreditorName { get; set; }

        /// <summary>
        /// Bank account no. at the IPA Bank
        /// </summary>
        /// <value>Bank account no. at the IPA Bank</value>
        [DataMember(Name="bank_account_no")]
        public string BankAccountNo { get; set; }

        /// <summary>
        /// Bank account type. For e.g. current account
        /// </summary>
        /// <value>Bank account type. For e.g. current account</value>
        [DataMember(Name="bank_account_type")]
        public string BankAccountType { get; set; }

        /// <summary>
        /// Name of the IPA Bank
        /// </summary>
        /// <value>Name of the IPA Bank</value>
        [DataMember(Name="bank_name")]
        public string BankName { get; set; }

        /// <summary>
        /// RTGS IFSC code of the IPA Bank to receive payments
        /// </summary>
        /// <value>RTGS IFSC code of the IPA Bank to receive payments</value>
        [DataMember(Name="rtgs_ifsc_code")]
        public string RtgsIfscCode { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentAccountDetails {\n");
            sb.Append("  CreditorName: ").Append(CreditorName).Append("\n");
            sb.Append("  BankAccountNo: ").Append(BankAccountNo).Append("\n");
            sb.Append("  BankAccountType: ").Append(BankAccountType).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  RtgsIfscCode: ").Append(RtgsIfscCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PaymentAccountDetails)obj);
        }

        /// <summary>
        /// Returns true if PaymentAccountDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentAccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentAccountDetails other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CreditorName == other.CreditorName ||
                    this.CreditorName != null &&
                    this.CreditorName.Equals(other.CreditorName)
                ) && 
                (
                    this.BankAccountNo == other.BankAccountNo ||
                    this.BankAccountNo != null &&
                    this.BankAccountNo.Equals(other.BankAccountNo)
                ) && 
                (
                    this.BankAccountType == other.BankAccountType ||
                    this.BankAccountType != null &&
                    this.BankAccountType.Equals(other.BankAccountType)
                ) && 
                (
                    this.BankName == other.BankName ||
                    this.BankName != null &&
                    this.BankName.Equals(other.BankName)
                ) && 
                (
                    this.RtgsIfscCode == other.RtgsIfscCode ||
                    this.RtgsIfscCode != null &&
                    this.RtgsIfscCode.Equals(other.RtgsIfscCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CreditorName != null)
                    hash = hash * 59 + this.CreditorName.GetHashCode();
                    if (this.BankAccountNo != null)
                    hash = hash * 59 + this.BankAccountNo.GetHashCode();
                    if (this.BankAccountType != null)
                    hash = hash * 59 + this.BankAccountType.GetHashCode();
                    if (this.BankName != null)
                    hash = hash * 59 + this.BankName.GetHashCode();
                    if (this.RtgsIfscCode != null)
                    hash = hash * 59 + this.RtgsIfscCode.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(PaymentAccountDetails left, PaymentAccountDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentAccountDetails left, PaymentAccountDetails right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
