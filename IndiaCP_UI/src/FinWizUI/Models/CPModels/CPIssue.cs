/*
 * IndiaCP API
 *
 * This API will drive the UI
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CPIssue :  IEquatable<CPIssue>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CPIssue" /> class.
        /// </summary>
        /// <param name="CpProgramId">Unique identifier representing a specific CP Program raised by an Issuer. This CP Issue is allotted under this umbrella program.</param>
        /// <param name="CpTradeId">Unique identifier representing a specific CP Issue under the umbrella CP Program.</param>
        /// <param name="BookId">Internal Book Id that this trade is booked under.</param>
        /// <param name="Isin">Unique CP Security Identifier No. In India this is issued by NSDL for Commercial Paper type of securities..</param>
        /// <param name="TraderId">Unique identifier of the trader booking this trade.</param>
        /// <param name="IssuerId">Unique identifier of the Issuer.</param>
        /// <param name="IssuerName">Display name of the Issuer.</param>
        /// <param name="InvestorId">Unique identifier of the Investor. This also uniquely identifies the Investor DL Node.</param>
        /// <param name="InvestorName">Display name of the Investor.</param>
        /// <param name="IpaId">Unique identifier of the IPA.</param>
        /// <param name="IpaName">Display name of the IPA.</param>
        /// <param name="DepositoryId">Unique identifier of the Depository (NSDL).</param>
        /// <param name="DepositoryName">Display name of the Depository.</param>
        /// <param name="TradeDate">Date on which the trade was captured.</param>
        /// <param name="ValueDate">Date on which the trade was settled and the Cash and CP securities were swapped between the Issuer and the Investor.</param>
        /// <param name="MaturityDate">Date on which the CP will be matured and redeemed.</param>
        /// <param name="Currency">Currency of the issued CP Notes.</param>
        /// <param name="NotionalAmount">This is the amount that will be paid by the Issuer to the Investor on redemption.</param>
        /// <param name="Rate">Rate at which the yield is calculated.</param>
        /// <param name="IssuerSettlementDetails">IssuerSettlementDetails.</param>
        /// <param name="InvestorSettlementDetails">InvestorSettlementDetails.</param>
        /// <param name="DealConfirmationDocId">Unique identifier of the deal confirmation document signed by both the Issuer and the Investor.</param>
        public CPIssue(string CpProgramId = null, string CpTradeId = null, string BookId = null, string Isin = null, string TraderId = null, string IssuerId = null, string IssuerName = null, string InvestorId = null, string InvestorName = null, string IpaId = null, string IpaName = null, string DepositoryId = null, string DepositoryName = null, DateTime? TradeDate = null, DateTime? ValueDate = null, DateTime? MaturityDate = null, string Currency = null, DateTime? NotionalAmount = null, float? Rate = null, SettlementDetails IssuerSettlementDetails = null, SettlementDetails InvestorSettlementDetails = null, string DealConfirmationDocId = null)
        {
            this.CpProgramId = CpProgramId;
            this.CpTradeId = CpTradeId;
            this.BookId = BookId;
            this.Isin = Isin;
            this.TraderId = TraderId;
            this.IssuerId = IssuerId;
            this.IssuerName = IssuerName;
            this.InvestorId = InvestorId;
            this.InvestorName = InvestorName;
            this.IpaId = IpaId;
            this.IpaName = IpaName;
            this.DepositoryId = DepositoryId;
            this.DepositoryName = DepositoryName;
            this.TradeDate = TradeDate;
            this.ValueDate = ValueDate;
            this.MaturityDate = MaturityDate;
            this.Currency = Currency;
            this.NotionalAmount = NotionalAmount;
            this.Rate = Rate;
            this.IssuerSettlementDetails = IssuerSettlementDetails;
            this.InvestorSettlementDetails = InvestorSettlementDetails;
            this.DealConfirmationDocId = DealConfirmationDocId;
            
        }

        /// <summary>
        /// Unique identifier representing a specific CP Program raised by an Issuer. This CP Issue is allotted under this umbrella program
        /// </summary>
        /// <value>Unique identifier representing a specific CP Program raised by an Issuer. This CP Issue is allotted under this umbrella program</value>
        [DataMember(Name="cp_program_id")]
        public string CpProgramId { get; set; }

        /// <summary>
        /// Unique identifier representing a specific CP Issue under the umbrella CP Program
        /// </summary>
        /// <value>Unique identifier representing a specific CP Issue under the umbrella CP Program</value>
        [DataMember(Name="cp_trade_id")]
        public string CpTradeId { get; set; }

        /// <summary>
        /// Internal Book Id that this trade is booked under
        /// </summary>
        /// <value>Internal Book Id that this trade is booked under</value>
        [DataMember(Name="book_id")]
        public string BookId { get; set; }

        /// <summary>
        /// Unique CP Security Identifier No. In India this is issued by NSDL for Commercial Paper type of securities.
        /// </summary>
        /// <value>Unique CP Security Identifier No. In India this is issued by NSDL for Commercial Paper type of securities.</value>
        [DataMember(Name="isin")]
        public string Isin { get; set; }

        /// <summary>
        /// Unique identifier of the trader booking this trade
        /// </summary>
        /// <value>Unique identifier of the trader booking this trade</value>
        [DataMember(Name="trader_id")]
        public string TraderId { get; set; }

        /// <summary>
        /// Unique identifier of the Issuer
        /// </summary>
        /// <value>Unique identifier of the Issuer</value>
        [DataMember(Name="issuer_id")]
        public string IssuerId { get; set; }

        /// <summary>
        /// Display name of the Issuer
        /// </summary>
        /// <value>Display name of the Issuer</value>
        [DataMember(Name="issuer_name")]
        public string IssuerName { get; set; }

        /// <summary>
        /// Unique identifier of the Investor. This also uniquely identifies the Investor DL Node
        /// </summary>
        /// <value>Unique identifier of the Investor. This also uniquely identifies the Investor DL Node</value>
        [DataMember(Name="investor_id")]
        public string InvestorId { get; set; }

        /// <summary>
        /// Display name of the Investor
        /// </summary>
        /// <value>Display name of the Investor</value>
        [DataMember(Name="investor_name")]
        public string InvestorName { get; set; }

        /// <summary>
        /// Unique identifier of the IPA
        /// </summary>
        /// <value>Unique identifier of the IPA</value>
        [DataMember(Name="ipa_id")]
        public string IpaId { get; set; }

        /// <summary>
        /// Display name of the IPA
        /// </summary>
        /// <value>Display name of the IPA</value>
        [DataMember(Name="ipa_name")]
        public string IpaName { get; set; }

        /// <summary>
        /// Unique identifier of the Depository (NSDL)
        /// </summary>
        /// <value>Unique identifier of the Depository (NSDL)</value>
        [DataMember(Name="depository_id")]
        public string DepositoryId { get; set; }

        /// <summary>
        /// Display name of the Depository
        /// </summary>
        /// <value>Display name of the Depository</value>
        [DataMember(Name="depository_name")]
        public string DepositoryName { get; set; }

        /// <summary>
        /// Date on which the trade was captured
        /// </summary>
        /// <value>Date on which the trade was captured</value>
        [DataMember(Name="trade_date")]
        public DateTime? TradeDate { get; set; }

        /// <summary>
        /// Date on which the trade was settled and the Cash and CP securities were swapped between the Issuer and the Investor
        /// </summary>
        /// <value>Date on which the trade was settled and the Cash and CP securities were swapped between the Issuer and the Investor</value>
        [DataMember(Name="value_date")]
        public DateTime? ValueDate { get; set; }

        /// <summary>
        /// Date on which the CP will be matured and redeemed
        /// </summary>
        /// <value>Date on which the CP will be matured and redeemed</value>
        [DataMember(Name="maturity_date")]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// Currency of the issued CP Notes
        /// </summary>
        /// <value>Currency of the issued CP Notes</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// This is the amount that will be paid by the Issuer to the Investor on redemption
        /// </summary>
        /// <value>This is the amount that will be paid by the Issuer to the Investor on redemption</value>
        [DataMember(Name="notional_amount")]
        public DateTime? NotionalAmount { get; set; }

        /// <summary>
        /// Rate at which the yield is calculated
        /// </summary>
        /// <value>Rate at which the yield is calculated</value>
        [DataMember(Name="rate")]
        public float? Rate { get; set; }

        /// <summary>
        /// Gets or Sets IssuerSettlementDetails
        /// </summary>
        [DataMember(Name="issuer_settlement_details")]
        public SettlementDetails IssuerSettlementDetails { get; set; }

        /// <summary>
        /// Gets or Sets InvestorSettlementDetails
        /// </summary>
        [DataMember(Name="investor_settlement_details")]
        public SettlementDetails InvestorSettlementDetails { get; set; }

        /// <summary>
        /// Unique identifier of the deal confirmation document signed by both the Issuer and the Investor
        /// </summary>
        /// <value>Unique identifier of the deal confirmation document signed by both the Issuer and the Investor</value>
        [DataMember(Name="deal_confirmation_doc_id")]
        public string DealConfirmationDocId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CPIssue {\n");
            sb.Append("  CpProgramId: ").Append(CpProgramId).Append("\n");
            sb.Append("  CpTradeId: ").Append(CpTradeId).Append("\n");
            sb.Append("  BookId: ").Append(BookId).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  TraderId: ").Append(TraderId).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  InvestorId: ").Append(InvestorId).Append("\n");
            sb.Append("  InvestorName: ").Append(InvestorName).Append("\n");
            sb.Append("  IpaId: ").Append(IpaId).Append("\n");
            sb.Append("  IpaName: ").Append(IpaName).Append("\n");
            sb.Append("  DepositoryId: ").Append(DepositoryId).Append("\n");
            sb.Append("  DepositoryName: ").Append(DepositoryName).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  ValueDate: ").Append(ValueDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  NotionalAmount: ").Append(NotionalAmount).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  IssuerSettlementDetails: ").Append(IssuerSettlementDetails).Append("\n");
            sb.Append("  InvestorSettlementDetails: ").Append(InvestorSettlementDetails).Append("\n");
            sb.Append("  DealConfirmationDocId: ").Append(DealConfirmationDocId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CPIssue)obj);
        }

        /// <summary>
        /// Returns true if CPIssue instances are equal
        /// </summary>
        /// <param name="other">Instance of CPIssue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CPIssue other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CpProgramId == other.CpProgramId ||
                    this.CpProgramId != null &&
                    this.CpProgramId.Equals(other.CpProgramId)
                ) && 
                (
                    this.CpTradeId == other.CpTradeId ||
                    this.CpTradeId != null &&
                    this.CpTradeId.Equals(other.CpTradeId)
                ) && 
                (
                    this.BookId == other.BookId ||
                    this.BookId != null &&
                    this.BookId.Equals(other.BookId)
                ) && 
                (
                    this.Isin == other.Isin ||
                    this.Isin != null &&
                    this.Isin.Equals(other.Isin)
                ) && 
                (
                    this.TraderId == other.TraderId ||
                    this.TraderId != null &&
                    this.TraderId.Equals(other.TraderId)
                ) && 
                (
                    this.IssuerId == other.IssuerId ||
                    this.IssuerId != null &&
                    this.IssuerId.Equals(other.IssuerId)
                ) && 
                (
                    this.IssuerName == other.IssuerName ||
                    this.IssuerName != null &&
                    this.IssuerName.Equals(other.IssuerName)
                ) && 
                (
                    this.InvestorId == other.InvestorId ||
                    this.InvestorId != null &&
                    this.InvestorId.Equals(other.InvestorId)
                ) && 
                (
                    this.InvestorName == other.InvestorName ||
                    this.InvestorName != null &&
                    this.InvestorName.Equals(other.InvestorName)
                ) && 
                (
                    this.IpaId == other.IpaId ||
                    this.IpaId != null &&
                    this.IpaId.Equals(other.IpaId)
                ) && 
                (
                    this.IpaName == other.IpaName ||
                    this.IpaName != null &&
                    this.IpaName.Equals(other.IpaName)
                ) && 
                (
                    this.DepositoryId == other.DepositoryId ||
                    this.DepositoryId != null &&
                    this.DepositoryId.Equals(other.DepositoryId)
                ) && 
                (
                    this.DepositoryName == other.DepositoryName ||
                    this.DepositoryName != null &&
                    this.DepositoryName.Equals(other.DepositoryName)
                ) && 
                (
                    this.TradeDate == other.TradeDate ||
                    this.TradeDate != null &&
                    this.TradeDate.Equals(other.TradeDate)
                ) && 
                (
                    this.ValueDate == other.ValueDate ||
                    this.ValueDate != null &&
                    this.ValueDate.Equals(other.ValueDate)
                ) && 
                (
                    this.MaturityDate == other.MaturityDate ||
                    this.MaturityDate != null &&
                    this.MaturityDate.Equals(other.MaturityDate)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.NotionalAmount == other.NotionalAmount ||
                    this.NotionalAmount != null &&
                    this.NotionalAmount.Equals(other.NotionalAmount)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.IssuerSettlementDetails == other.IssuerSettlementDetails ||
                    this.IssuerSettlementDetails != null &&
                    this.IssuerSettlementDetails.Equals(other.IssuerSettlementDetails)
                ) && 
                (
                    this.InvestorSettlementDetails == other.InvestorSettlementDetails ||
                    this.InvestorSettlementDetails != null &&
                    this.InvestorSettlementDetails.Equals(other.InvestorSettlementDetails)
                ) && 
                (
                    this.DealConfirmationDocId == other.DealConfirmationDocId ||
                    this.DealConfirmationDocId != null &&
                    this.DealConfirmationDocId.Equals(other.DealConfirmationDocId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CpProgramId != null)
                    hash = hash * 59 + this.CpProgramId.GetHashCode();
                    if (this.CpTradeId != null)
                    hash = hash * 59 + this.CpTradeId.GetHashCode();
                    if (this.BookId != null)
                    hash = hash * 59 + this.BookId.GetHashCode();
                    if (this.Isin != null)
                    hash = hash * 59 + this.Isin.GetHashCode();
                    if (this.TraderId != null)
                    hash = hash * 59 + this.TraderId.GetHashCode();
                    if (this.IssuerId != null)
                    hash = hash * 59 + this.IssuerId.GetHashCode();
                    if (this.IssuerName != null)
                    hash = hash * 59 + this.IssuerName.GetHashCode();
                    if (this.InvestorId != null)
                    hash = hash * 59 + this.InvestorId.GetHashCode();
                    if (this.InvestorName != null)
                    hash = hash * 59 + this.InvestorName.GetHashCode();
                    if (this.IpaId != null)
                    hash = hash * 59 + this.IpaId.GetHashCode();
                    if (this.IpaName != null)
                    hash = hash * 59 + this.IpaName.GetHashCode();
                    if (this.DepositoryId != null)
                    hash = hash * 59 + this.DepositoryId.GetHashCode();
                    if (this.DepositoryName != null)
                    hash = hash * 59 + this.DepositoryName.GetHashCode();
                    if (this.TradeDate != null)
                    hash = hash * 59 + this.TradeDate.GetHashCode();
                    if (this.ValueDate != null)
                    hash = hash * 59 + this.ValueDate.GetHashCode();
                    if (this.MaturityDate != null)
                    hash = hash * 59 + this.MaturityDate.GetHashCode();
                    if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                    if (this.NotionalAmount != null)
                    hash = hash * 59 + this.NotionalAmount.GetHashCode();
                    if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                    if (this.IssuerSettlementDetails != null)
                    hash = hash * 59 + this.IssuerSettlementDetails.GetHashCode();
                    if (this.InvestorSettlementDetails != null)
                    hash = hash * 59 + this.InvestorSettlementDetails.GetHashCode();
                    if (this.DealConfirmationDocId != null)
                    hash = hash * 59 + this.DealConfirmationDocId.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CPIssue left, CPIssue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CPIssue left, CPIssue right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
