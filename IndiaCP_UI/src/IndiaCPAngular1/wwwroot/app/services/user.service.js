/**
 * IndiaCP API
 * This API will drive the UI
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// <reference path="api.d.ts" />
/* tslint:disable:no-unused-variable member-ordering */
var app;
(function (app) {
    var services;
    (function (services) {
        "use strict";
        var UserService = (function () {
            function UserService($http, $httpParamSerializer, basePath) {
                this.$http = $http;
                this.$httpParamSerializer = $httpParamSerializer;
                this.basePath = "http://finwizui.azurewebsites.net/api";
                this.defaultHeaders = {};
                if (basePath !== undefined) {
                    this.basePath = basePath;
                }
            }
            UserService.prototype.extendObj = function (objA, objB) {
                for (var key in objB) {
                    if (objB.hasOwnProperty(key)) {
                        objA[key.toString()] = objB[key.toString()];
                    }
                }
                return objA;
            };
            /**
             * Complete audit log of all changes/versions of given CP Program
             * A given CP Program once initiated undergoes various changes as it progresses through the trade lifecycle of generating ISIN, generating Deal Confirmations with each identified Investor, getting IPA Verification till the final settlement of all Deals and followed by redemption of the CP at the Maturity Date. This API will return this complete log history.
             * @param issuer issuer id that uniquely maps to the DL node
             * @param cpProgramId CP Program ID that uniquely identifies the CP Program issued by the Issuer
             */
            UserService.prototype.transactionhistoryIssuerCpProgramIdGet = function (issuer, cpProgramId, extraHttpRequestParams) {
                var localVarPath = this.basePath + "/transactionhistory/{issuer}/{cpProgramId}"
                    .replace("{" + "issuer" + "}", String(issuer))
                    .replace("{" + "cpProgramId" + "}", String(cpProgramId));
                var queryParameters = {};
                var headerParams = this.extendObj({}, this.defaultHeaders);
                // verify required parameter "issuer" is not null or undefined
                if (issuer === null || issuer === undefined) {
                    throw new Error("Required parameter issuer was null or undefined when calling transactionhistoryIssuerCpProgramIdGet.");
                }
                // verify required parameter "cpProgramId" is not null or undefined
                if (cpProgramId === null || cpProgramId === undefined) {
                    throw new Error("Required parameter cpProgramId was null or undefined when calling transactionhistoryIssuerCpProgramIdGet.");
                }
                var httpRequestParams = {
                    method: "GET",
                    url: localVarPath,
                    json: true,
                    params: queryParameters,
                    headers: headerParams
                };
                if (extraHttpRequestParams) {
                    httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
                }
                return this.$http(httpRequestParams);
            };
            return UserService;
        }());
        UserService.$inject = ["$http", "$httpParamSerializer", "basePath"];
    })(services = app.services || (app.services = {}));
})(app || (app = {}));
//# sourceMappingURL=user.service.js.map