package com.jpmorgan.cakeshop.controller;

import com.jpmorgan.cakeshop.config.JsonMethodArgumentResolver.JsonBodyParam;
import com.jpmorgan.cakeshop.error.APIException;
import com.jpmorgan.cakeshop.model.APIData;
import com.jpmorgan.cakeshop.model.APIError;
import com.jpmorgan.cakeshop.model.APIResponse;
import com.jpmorgan.cakeshop.model.Contract;
import com.jpmorgan.cakeshop.model.ContractABI;
import com.jpmorgan.cakeshop.model.ContractABI.Entry.Param;
import com.jpmorgan.cakeshop.model.ContractABI.Function;
import com.jpmorgan.cakeshop.model.SolidityType.Bytes32Type;
import com.jpmorgan.cakeshop.model.Transaction;
import com.jpmorgan.cakeshop.model.TransactionRequest;
import com.jpmorgan.cakeshop.model.TransactionResult;
import com.jpmorgan.cakeshop.service.ContractRegistryService;
import com.jpmorgan.cakeshop.service.ContractService;
import com.jpmorgan.cakeshop.service.ContractService.CodeType;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

import org.bouncycastle.util.encoders.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.async.WebAsyncTask;

@RestController
@RequestMapping(value = "/api/contract",
    method = RequestMethod.POST,
    consumes = MediaType.APPLICATION_JSON_VALUE,
    produces = MediaType.APPLICATION_JSON_VALUE)
public class ContractController extends BaseController {

    private static final String DEFAULT_CODE_TYPE = "solidity";

    @Autowired
    private ContractService contractService;

	@Autowired
	private ContractRegistryService contractRegistry;

    @RequestMapping("/get")
    public ResponseEntity<APIResponse> getContract(
            @JsonBodyParam String address) throws APIException {

        Contract contract = contractService.get(address);

        APIResponse res = new APIResponse();

        if (contract != null) {
            res.setData(toAPIData(contract));
            return new ResponseEntity<>(res, HttpStatus.OK);
        }

        APIError err = new APIError();
        err.setStatus("404");
        err.setTitle("Contract not found");
        res.addError(err);
        return new ResponseEntity<>(res, HttpStatus.NOT_FOUND);
    }

    @RequestMapping("/compile")
    public ResponseEntity<APIResponse> compile(
            @JsonBodyParam String code,
            @JsonBodyParam(defaultValue=DEFAULT_CODE_TYPE) String code_type,
            @JsonBodyParam(required=false) Boolean optimize) throws APIException {

        List<Contract> contracts = contractService.compile(code, CodeType.valueOf(code_type), optimize);

        APIResponse res = new APIResponse();

        if (contracts != null) {
            res.setData(toAPIData(contracts));
            return new ResponseEntity<>(res, HttpStatus.OK);
        }

        APIError err = new APIError();
        err.setStatus("400");
        err.setTitle("Bad Request");
        res.addError(err);
        return new ResponseEntity<>(res, HttpStatus.BAD_REQUEST);
    }

    @RequestMapping("/create")
    public ResponseEntity<APIResponse> create(
            @JsonBodyParam String from,
            @JsonBodyParam String code,
            @JsonBodyParam(defaultValue=DEFAULT_CODE_TYPE) String code_type,
            @JsonBodyParam(required=false) Object[] args,
            @JsonBodyParam(required=false) String binary,
            @JsonBodyParam(required=false) Boolean optimize,
            @JsonBodyParam final String privateFrom,
            @JsonBodyParam final List<String> privateFor) throws APIException {

        TransactionResult tx = contractService.create(from, code, CodeType.valueOf(code_type), args, binary,
                privateFrom, privateFor);

        APIResponse res = new APIResponse();

        if (tx != null) {
            res.setData(tx.toAPIData());
            return new ResponseEntity<>(res, HttpStatus.OK);
        }

        APIError err = new APIError();
        err.setStatus("400");
        err.setTitle("Bad Request");
        res.addError(err);
        return new ResponseEntity<>(res, HttpStatus.BAD_REQUEST);
    }

    @RequestMapping("/list")
    public ResponseEntity<APIResponse> list() throws APIException {
        List<Contract> contracts = contractService.list();
        APIResponse res = new APIResponse();
        res.setData(toAPIData(contracts));

        return new ResponseEntity<>(res, HttpStatus.OK);
    }

    @RequestMapping("/read")
    public ResponseEntity<APIResponse> read(
            @JsonBodyParam String from,
            @JsonBodyParam String address,
            @JsonBodyParam String method,
            @JsonBodyParam Object[] args,
            @JsonBodyParam(required=false) Object blockNumber) throws APIException {

        Object result = contractService.read(createTransactionRequest(from, address, method, args, true, blockNumber));
        APIResponse res = new APIResponse();
        res.setData(result);

        return new ResponseEntity<>(res, HttpStatus.OK);
    }

    private TransactionRequest createTransactionRequest(String from, String address, String method, Object[] args, boolean isRead, Object blockNumber) throws APIException {
        ContractABI abi = contractService.get(address).getContractAbi();
        if (abi == null) {
            throw new APIException("Contract adddress " + address + " is not in the registry");
        }

        Function func = abi.getFunction(method);
        if (func == null) {
            throw new APIException("Method '" + method + "' does not exist in contract at " + address);
        }

        args = decodeArgs(func, args);

        return new TransactionRequest(from, address, abi, method, args, isRead);
    }

    /**
     * Handle Base64 encoded byte/string inputs (byte arrays must be base64 encoded to put them on
     * the wire w/ JSON)
     *
     * @param method
     * @param args
     * @return
     * @throws APIException
     */
    private Object[] decodeArgs(Function method, Object[] args) throws APIException {
        if (args == null || args.length == 0) {
            return args;
        }

        List<Param> params = method.inputs;
        for (int i = 0; i < args.length; i++) {
            Object arg = args[i];
            Param param = params.get(i);
            if (param.type instanceof Bytes32Type && arg instanceof String) {
                args[i] = new String(Base64.decode((String) arg));
            }
        }

        return args;
    }

    @RequestMapping("/transact")
    public WebAsyncTask<ResponseEntity<APIResponse>> transact(
            @JsonBodyParam final String from,
            @JsonBodyParam final String address,
            @JsonBodyParam final String method,
            @JsonBodyParam final Object[] args,
            @JsonBodyParam final String privateFrom,
            @JsonBodyParam final List<String> privateFor) throws APIException {

        Callable<ResponseEntity<APIResponse>> callable = new Callable<ResponseEntity<APIResponse>>() {
            @Override
            public ResponseEntity<APIResponse> call() throws Exception {
                TransactionRequest req = createTransactionRequest(from, address, method, args, false, null);
                req.setPrivateFrom(privateFrom);
                req.setPrivateFor(privateFor);

                TransactionResult tr = contractService.transact(req);
                APIResponse res = new APIResponse();
                res.setData(tr.toAPIData());
                ResponseEntity<APIResponse> response = new ResponseEntity<>(res, HttpStatus.OK);
                return response;
            }
        };
        WebAsyncTask asyncTask = new WebAsyncTask(callable);
        return asyncTask;
    }

    @RequestMapping("/transactions/list")
    public ResponseEntity<APIResponse> listTransactions(
            @JsonBodyParam String address) throws APIException {

        List<Transaction> txns = contractService.listTransactions(address);

        List<APIData> data = new ArrayList<>();
        for (Transaction tx : txns) {
            data.add(tx.toAPIData());
        }

        APIResponse res = new APIResponse();
        res.setData(data);

        return new ResponseEntity<>(res, HttpStatus.OK);
    }

  @RequestMapping("/{issuer}")
  public ResponseEntity<APIResponse> issueCPProgram(
    @JsonBodyParam CPIssue cpIssue) throws APIException {
    Object[] args = new Object[7];
    args[0]=cpIssue.getCpProgramId();
    args[1]=cpIssue.getCpTradeId();
    args[2]=cpIssue.getBookId();
    args[3]=cpIssue.getTraderId();
    args[4]=cpIssue.getValueDate();
    args[5]=cpIssue.getMaturityDate();
    args[6]=cpIssue.getNotionalAmount();
    args[7]=cpIssue.getRate();

    ArrayList<String> privateFor = new ArrayList<String>();
    privateFor.add("QfeDAys9MPDs2XHExtc84jKGHxZg/aj52DTh0vtA3Xc=");

    return create("93546f0314bf8eacb3ea45ba75dfcd1a2341e59b", "contract CPIssue{\n" +
        "\n" +
        "string public cpProgramId;\n" +
        "string public cpTradeId;\n" +
        "string public bookId;\n" +
        "string public traderId;\n" +
        "string public valueDate;\n" +
        "string public maturityDate;\n" +
        "uint public faceValue;\n" +
        "uint public rate;\n" +
        "\n" +
        "//populated later\n" +
        "string public isin;\n" +
        "string public dealConfirmationDocId;\n" +
        "\n" +
        "//default values\n" +
        "uint public tradeDate;\n" +
        "string public currency;\n" +
        "\n" +
        "//TODO: to be populated from network mapping service\n" +
        "address public issuerAddress;\n" +
        "address public investorAddress;\n" +
        "address public ipaAddress;\n" +
        "address public depositoryAddress;\n" +
        "\n" +
        "//assigned values\n" +
        "string public status;\n" +
        "uint public version;\n" +
        "uint public lastModified;\n" +
        "\n" +
        "function CPIssue(string _cpProgramId, string _cpTradeId, string _bookId, string _traderId, string _valueDate, string _maturityDate, uint _faceValue, uint _rate) {\n" +
        "    cpProgramId = _cpProgramId;\n" +
        "    cpTradeId = _cpTradeId;\n" +
        "    bookId = _bookId;\n" +
        "    traderId = _traderId;\n" +
        "    valueDate = _valueDate;\n" +
        "    maturityDate = _maturityDate;\n" +
        "    faceValue = _faceValue;\n" +
        "    rate = _rate;\n" +
        "\n" +
        "    //default values\n" +
        "    tradeDate = now;\n" +
        "    currency = \"INR\";\n" +
        "\n" +
        "    //assigned values\n" +
        "    status = \"Issued\";\n" +
        "    version = 1;\n" +
        "    lastModified = tradeDate;\n" +
        "\n" +
        "}\n" +
        "\n" +
        "function fetchCPIssue() constant returns (string) {\n" +
        "    return cpTradeId;\n" +
        "}\n" +
        "\n" +
        "}",
      "solidity", args, "6060604052604051611643380380611643833981016040528080518201919060200180518201919060200180518201919060200180518201919060200180518201919060200180518201919060200180519060200190919080519060200190919050505b8760006000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b257805160ff19168380011785556100e3565b828001600101855582156100e3579182015b828111156100e25782518260005055916020019190600101906100c4565b5b50905061010e91906100f0565b8082111561010a57600081815060009055506001016100f0565b5090565b50508660016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015f57805160ff1916838001178555610190565b82800160010185558215610190579182015b8281111561018f578251826000505591602001919060010190610171565b5b5090506101bb919061019d565b808211156101b7576000818150600090555060010161019d565b5090565b50508560026000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061020c57805160ff191683800117855561023d565b8280016001018555821561023d579182015b8281111561023c57825182600050559160200191906001019061021e565b5b509050610268919061024a565b80821115610264576000818150600090555060010161024a565b5090565b50508460036000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102b957805160ff19168380011785556102ea565b828001600101855582156102ea579182015b828111156102e95782518260005055916020019190600101906102cb565b5b50905061031591906102f7565b8082111561031157600081815060009055506001016102f7565b5090565b50508360046000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061036657805160ff1916838001178555610397565b82800160010185558215610397579182015b82811115610396578251826000505591602001919060010190610378565b5b5090506103c291906103a4565b808211156103be57600081815060009055506001016103a4565b5090565b50508260056000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061041357805160ff1916838001178555610444565b82800160010185558215610444579182015b82811115610443578251826000505591602001919060010190610425565b5b50905061046f9190610451565b8082111561046b5760008181506000905550600101610451565b5090565b5050816006600050819055508060076000508190555042600a60005081905550604060405190810160405280600381526020017f494e520000000000000000000000000000000000000000000000000000000000815260200150600b6000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061051757805160ff1916838001178555610548565b82800160010185558215610548579182015b82811115610547578251826000505591602001919060010190610529565b5b5090506105739190610555565b8082111561056f5760008181506000905550600101610555565b5090565b5050604060405190810160405280600681526020017f497373756564000000000000000000000000000000000000000000000000000081526020015060106000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105fd57805160ff191683800117855561062e565b8280016001018555821561062e579182015b8281111561062d57825182600050559160200191906001019061060f565b5b509050610659919061063b565b80821115610655576000818150600090555060010161063b565b5090565b50506001601160005081905550600a600050546012600050819055505b5050505050505050610fb78061068c6000396000f36060604052361561010e576000357c01000000000000000000000000000000000000000000000000000000009004806312e228fd1461011057806317d73f7414610149578063200d2ed2146101c457806329a9e72c1461023f5780632c4e722e146102ba5780633b39e5ae146102dd57806344fd9caa1461035857806354fd4d501461037b578063571fabc51461039e578063609b918d1461041957806382d5a60d14610494578063a63234e01461050f578063a6cce4dd14610548578063b819dd8314610581578063d59624b4146105fc578063e356bb4314610677578063e5a6b10f146106b0578063e912832d1461072b578063f7267cfd146107a6578063f91d95a6146107c95761010e565b005b61011d60048050506107ec565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101566004805050610812565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101d160048050506108b3565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61024c6004805050610954565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c760048050506109f5565b6040518082815260200191505060405180910390f35b6102ea60048050506109fe565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561034a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103656004805050610a9f565b6040518082815260200191505060405180910390f35b6103886004805050610aa8565b6040518082815260200191505060405180910390f35b6103ab6004805050610ab1565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561040b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104266004805050610b52565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156104865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104a16004805050610bf3565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156105015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61051c6004805050610c94565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105556004805050610cba565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61058e6004805050610ce0565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156105ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106096004805050610d9c565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156106695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106846004805050610e3d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106bd6004805050610e63565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561071d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107386004805050610f04565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156107985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107b36004805050610fa5565b6040518082815260200191505060405180910390f35b6107d66004805050610fae565b6040518082815260200191505060405180910390f35b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ab5780601f10610880576101008083540402835291602001916108ab565b820191906000526020600020905b81548152906001019060200180831161088e57829003601f168201915b505050505081565b60106000508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561094c5780601f106109215761010080835404028352916020019161094c565b820191906000526020600020905b81548152906001019060200180831161092f57829003601f168201915b505050505081565b60016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ed5780601f106109c2576101008083540402835291602001916109ed565b820191906000526020600020905b8154815290600101906020018083116109d057829003601f168201915b505050505081565b60076000505481565b60046000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a975780601f10610a6c57610100808354040283529160200191610a97565b820191906000526020600020905b815481529060010190602001808311610a7a57829003601f168201915b505050505081565b60066000505481565b60116000505481565b60036000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b4a5780601f10610b1f57610100808354040283529160200191610b4a565b820191906000526020600020905b815481529060010190602001808311610b2d57829003601f168201915b505050505081565b60006000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610beb5780601f10610bc057610100808354040283529160200191610beb565b820191906000526020600020905b815481529060010190602001808311610bce57829003601f168201915b505050505081565b60086000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c8c5780601f10610c6157610100808354040283529160200191610c8c565b820191906000526020600020905b815481529060010190602001808311610c6f57829003601f168201915b505050505081565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602060405190810160405280600081526020015060016000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d8d5780601f10610d6257610100808354040283529160200191610d8d565b820191906000526020600020905b815481529060010190602001808311610d7057829003601f168201915b50505050509050610d99565b90565b60056000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e355780601f10610e0a57610100808354040283529160200191610e35565b820191906000526020600020905b815481529060010190602001808311610e1857829003601f168201915b505050505081565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610efc5780601f10610ed157610100808354040283529160200191610efc565b820191906000526020600020905b815481529060010190602001808311610edf57829003601f168201915b505050505081565b60026000508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f9d5780601f10610f7257610100808354040283529160200191610f9d565b820191906000526020600020905b815481529060010190602001808311610f8057829003601f168201915b505050505081565b60126000505481565b600a600050548156",
      false,"", privateFor);
  }


    private APIData toAPIData(Contract c) {
        return new APIData(c.getAddress(), Contract.API_DATA_TYPE, c);
    }

    private List<APIData> toAPIData(List<Contract> contracts) {
        List<APIData> data = new ArrayList<>();
        for (Contract c : contracts) {
           data.add(toAPIData(c));
        }
        return data;
    }

}
