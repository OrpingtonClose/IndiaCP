package com.barclays.indiacp.quorum.contract.code;

import com.jpmorgan.cakeshop.client.model.Contract;
import com.jpmorgan.cakeshop.model.ContractABI;
import com.jpmorgan.cakeshop.model.SolidityType;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by ritukedia on 28/12/16.
 */
public class SolidityContractCode {

    private String contractName;
    private String contractCode;
    private String contractBinary;
    private ContractABI contractABI;

    private static SolidityContractCode singleInstance;

    public static SolidityContractCode getSingleInstance(String contractName) {
        if (singleInstance == null) {
            singleInstance = new SolidityContractCode(contractName);
        }
        return singleInstance;
    }

    private SolidityContractCode(String contractName) {
        //Load contractName.sol
        try {
//            ClassLoader classLoader = getClass().getClassLoader();
//            File file = new File(classLoader.getResource("DL_CONFIG.properties").getFile());
//            FileInputStream input = new FileInputStream(file);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        //Compile contractName.sol

        //populate contract code
        contractCode = "contract CPProgram{\n" +
                "\n" +
                "  string public programId;\n" +
                "  string public name;\n" +
                "  string public _type;\n" +
                "  string public purpose;\n" +
                "  string public issueCommencementDate;\n" +
                "  string public programCurrency;\n" +
                "  uint public programSize;\n" +
                "  uint public programAllocatedValue;\n" +
                "  uint public maturityDays;\n" +
                "  \n" +
                "  //Document Hash Identifiers\n" +
                "  string public isinGenerationDocId;\n" +
                "  string public ipaVerificationDocId;\n" +
                "  string public ipaCertificateDocId;\n" +
                "  string public corporateActionFormDocId;\n" +
                "  string public allotmentLetterDocId;\n" +
                "  \n" +
                "  //Populate through network mapping service\n" +
                "  address public issuerAddress;\n" +
                "  //address public ipaAddress;\n" +
                "  //address public depositoryAddress;\n" +
                "  \n" +
                "  //status fields\n" +
                "  uint public version;\n" +
                "  string public status;\n" +
                "  //uint public lastModified;\n" +
                "  \n" +
                "  function CPProgram(string _programId, string _name, string __type, string _purpose, uint _programSize, uint _maturityDays){\n" +
                "    programId = _programId;\n" +
                "    name = _name;\n" +
                "    _type = __type;\n" +
                "    purpose = _purpose;\n" +
                "    programSize = _programSize;\n" +
                "    maturityDays = _maturityDays;\n" +
                "    \n" +
                "    //Default values\n" +
                "    programAllocatedValue = 0;\n" +
                "    issuerAddress = msg.sender;\n" +
                "    programCurrency = \"INR\";\n" +
                "    //ipaAddress = \"\";\n" +
                "    version = 1;\n" +
                "    status = \"Initiated\";\n" +
                "    //lastModified = now;\n" +
                "    \n" +
                "  }\n" +
                "  \n" +
                "  function fetchCPProgram() returns (string) {\n" +
                "    return name;\n" +
                "  }\n" +
                "}\n";

        //populate contract binary
        contractBinary = "";

        //populate contract abi
        String abiJSON = "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchCPProgram\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"programCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"corporateActionFormDocId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueCommencementDate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purpose\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isinGenerationDocId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allotmentLetterDocId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"programId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipaVerificationDocId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"programAllocatedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipaCertificateDocId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maturityDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_type\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"programSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_programId\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"__type\",\"type\":\"string\"},{\"name\":\"_purpose\",\"type\":\"string\"},{\"name\":\"_programSize\",\"type\":\"uint256\"},{\"name\":\"_maturityDays\",\"type\":\"uint256\"}],\"type\":\"constructor\"}]\n";
        contractABI = ContractABI.fromJson(abiJSON);

    }

    public String getContractCode() {
        return contractCode;
    }

    public String getContractBinary() {
        return contractBinary;
    }

    public ContractABI getContractABI() {
        return contractABI;
    }

    public Contract.CodeTypeEnum getCodeType() {
        return Contract.CodeTypeEnum.SOLIDITY;
    }

    public Object[] getConstructorArgs(Object contractModel) {
        try {
            List<Object> constructorArgs = new ArrayList<Object>();
            //TODO use the ABI and reflection to extract constructor arguments
            ContractABI.Constructor constructor = contractABI.getConstructor();
            List<ContractABI.Entry.Param> constructorParams = constructor.inputs;
            for (ContractABI.Entry.Param param : constructorParams) {
                String argName = param.getName();
                SolidityType argType = param.getType();
                String getterMethodName = getGetterMethodName(argName);

                Method method = contractModel.getClass().getMethod(getterMethodName);
                Object paramValue = method.invoke(contractModel);

                constructorArgs.add(getParamValue(paramValue, argType));
            }
            return constructorArgs.toArray();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private Object getParamValue(Object paramValue, SolidityType argType) {
        if (paramValue == null) {
            if (argType.getClass().equals(SolidityType.StringType.class)) {
                paramValue = "";
            } else {
                paramValue = 0;
            }
        }
        return paramValue;
    }

    private String getGetterMethodName(String argName) {
        // Param name type is a special variable in Solidity hence the IndiaCP Contract classes have used _type instead.
        // Handling type param differently
        String getterMethodName = null;
        if (argName.equals("__type")) {
            getterMethodName = "getType";
        } else {
            getterMethodName = "get" + argName.substring(1,2).toUpperCase() + argName.substring(2,argName.length());
        }
        return getterMethodName;
    }

    private static Class<?> getJavaType(SolidityType solType) {
        switch (solType.getName()) {
            case "string":
                return String.class;
            case "uint256":
                return Integer.class;
            default: return Object.class;
        }
    }
}
